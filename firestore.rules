rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function hasRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function isAdmin() {
      return hasRole('admin') || hasRole('super admin');
    }

    // --- USERS ---
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow delete: if isAdmin();
      
      // Subcollections
      match /trusted/{document=**} {
        allow read, write: if isSignedIn() && isOwner(userId);
      }
    }

    // --- USER SETTINGS ---
    match /userSettings/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // --- DOCTOR AVAILABILITY ---
    match /doctorAvailability/{doctorId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == doctorId;
    }

    // --- APPOINTMENTS ---
    match /appointments/{appointmentId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.patientId || 
         request.auth.uid == resource.data.doctorId);

      allow list: if request.auth != null;

      allow create: if request.auth != null &&
        (request.auth.uid == request.resource.data.patientId || 
         request.auth.uid == request.resource.data.doctorId);

      allow update: if request.auth != null &&
        (request.auth.uid == resource.data.patientId || 
         request.auth.uid == resource.data.doctorId);
    }

    // --- CONVERSATIONS ---
    match /conversations/{conversationId} {
      allow read, write: if request.auth != null &&
        request.auth.uid in resource.data.participants;

      allow create: if request.auth != null &&
        request.resource.data.participants is list &&
        request.auth.uid in request.resource.data.participants;

      // --- MESSAGES SUBCOLLECTION ---
      match /messages/{messageId} {
        allow read, write: if request.auth != null &&
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;

        allow create, update: if request.auth != null &&
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants &&
          (
            request.resource.data.fileData == null || 
            request.resource.data.fileData.size <= 10000000 // Increased to 10MB for file attachments
          );
      }
    }

    // --- SESSIONS ---
    match /sessions/{sessionId} {
      allow read: if isSignedIn() && (
        request.auth.uid == resource.data.userId ||
        isAdmin()
      );
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow update: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow delete: if isSignedIn() && (
        request.auth.uid == resource.data.userId ||
        isAdmin()
      );
    }

    // --- CALLS & WEBRTC SIGNALING ---
    match /calls/{callId} {
      allow read: if isSignedIn() && (
        request.auth.uid == resource.data.callerId ||
        request.auth.uid == resource.data.receiverId
      );
      allow create: if isSignedIn() && (
        request.auth.uid == request.resource.data.callerId ||
        request.auth.uid == request.resource.data.receiverId
      ) && (
        request.resource.data.keys().hasAll(['callerId', 'receiverId', 'type', 'status']) &&
        request.resource.data.type in ['video', 'voice'] &&
        request.resource.data.status == 'initiated'
      );
      allow update: if isSignedIn() && (
        request.auth.uid == resource.data.callerId ||
        request.auth.uid == resource.data.receiverId
      ) && (
        (
          resource.data.status == 'initiated' && 
          request.resource.data.status in ['connected', 'rejected', 'ended']
        ) ||
        (
          resource.data.status == 'connected' && 
          request.resource.data.status == 'ended'
        )
      );
    }

    // --- ICE CANDIDATES SUBCOLLECTION ---
    match /calls/{callId}/candidates/{candidateId} {
      allow read, write: if isSignedIn() && (
        request.auth.uid == get(/databases/$(database)/documents/calls/$(callId)).data.callerId ||
        request.auth.uid == get(/databases/$(database)/documents/calls/$(callId)).data.receiverId
      );
    }

    // --- CALL HISTORY ---
    match /callHistory/{historyId} {
      allow read: if isSignedIn() && (
        request.auth.uid == resource.data.callerId ||
        request.auth.uid == resource.data.receiverId
      );
      allow create: if isSignedIn() && (
        request.auth.uid == request.resource.data.callerId ||
        request.auth.uid == request.resource.data.receiverId
      ) && (
        request.resource.data.keys().hasAll(['callerId', 'receiverId', 'type', 'status', 'startedAt']) &&
        request.resource.data.type in ['video', 'voice'] &&
        request.resource.data.status in ['connected', 'rejected', 'ended']
      );
      allow update: if isSignedIn() && (
        request.auth.uid == resource.data.callerId ||
        request.auth.uid == resource.data.receiverId
      );
    }

    // --- ACTIVE CALL STATUS ---
    match /activeCall/{userId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && request.auth.uid == userId;
      allow create, update: if isSignedIn() && (
        request.auth.uid == userId ||
        request.resource.data.callerId == request.auth.uid ||
        request.resource.data.receiverId == request.auth.uid
      );
    }

    // --- SIGNALING SESSION (for exchanging offers/answers) ---
    match /signaling/{sessionId} {
      allow read: if request.auth != null &&
        request.auth.uid in resource.data.participants;

      allow create: if request.auth != null &&
        request.auth.uid in request.resource.data.participants;
        
      allow update: if request.auth != null &&
        request.auth.uid in resource.data.participants;
    }

    // --- RTC CONFIG (TURN/STUN credentials) ---
    match /rtcConfig/{configId} {
      // Anyone authenticated can read the TURN/STUN server config
      allow read: if request.auth != null;
      
      // Only admins can update the config
      allow write: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // --- PRESCRIPTIONS ---
    match /prescriptions/{prescriptionId} {
      allow read: if request.auth != null &&
        (request.auth.uid == resource.data.patientId ||
         request.auth.uid == resource.data.doctorId);

      allow create: if request.auth != null &&
        request.auth.uid == request.resource.data.doctorId;

      allow update: if request.auth != null &&
        request.auth.uid == resource.data.doctorId;
    }

    // --- MEDICAL RECORDS ---
    match /medicalRecords/{recordId} {
      allow read: if request.auth != null;

      allow create: if request.auth != null;

      allow update, delete: if request.auth != null &&
        request.auth.uid == resource.data.patientId;

      allow update: if request.auth != null &&
        (request.auth.uid == resource.data.patientId || 
         request.auth.uid in resource.data.sharedWith);
    }

    // --- FEEDBACK ---
    match /feedback/{feedbackId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.userId ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );

      allow create: if request.auth != null;

      allow update: if request.auth != null && (
        request.auth.uid == resource.data.userId ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
      
      // Add explicit delete permission for users who created the feedback
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }

    // --- NOTIFICATIONS ---
    match /notifications/{notificationId} {
      allow read: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.userId;
    }

    // --- ACTIVITY LOGS ---
    match /activityLogs/{logId} {
      allow read: if isSignedIn() && (
        request.auth.uid == resource.data.userId ||
        isAdmin()
      );
      allow create: if isSignedIn();
      allow update, delete: if isAdmin();
    }

    // --- SYSTEM COLLECTION (for welcome content, landing page, etc.) ---
    match /system/{docId} {
      // Allow read access to all users (even unauthenticated)
      allow read: if true;
      
      // Allow write access to authenticated users for testing purposes
      // In production, you should restrict this to admins only
      allow write: if request.auth != null;
    }

    // Add this rule for system_metrics collection before the final admin access rule
    // This allows anyone to read system metrics, but only the server to write them

    // --- SYSTEM METRICS ---
    match /system_metrics/{metricId} {
      // Allow read access to authenticated users
      allow read: if request.auth != null;
      
      // Allow write access from server-side code
      // Since we can't authenticate server-side code easily without Admin SDK,
      // we'll use a special condition to identify server requests
      allow write: if true; // For now, allow all writes to this collection
    }

    // --- SUSPICIOUS LOGINS ---
    match /suspiciousLogins/{loginId} {
      allow read: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow delete: if isAdmin();
    }

    // --- REJECTED LOGINS ---
    match /rejectedLogins/{loginId} {
      allow read: if isSignedIn() && (request.auth.uid == resource.data.userId || isAdmin());
      allow create: if isSignedIn();
      allow update, delete: if isAdmin();
    }

    // --- FAILED LOGINS ---
    match /failedLogins/{loginId} {
      allow read: if isSignedIn() && (request.auth.uid == resource.data.userId || isAdmin());
      allow create: if true; // Allow anonymous creation for failed login tracking
      allow update, delete: if isAdmin();
    }

    // --- ADMIN ACCESS TO EVERYTHING ---
    match /{document=**} {
      allow read, write: if isSignedIn() && isAdmin();
    }
  }
}
